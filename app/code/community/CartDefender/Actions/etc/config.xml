<?xml version="1.0"?>
<!--
/**
 * Cart Defender Actions plugin for Magento 
 *
 * @package     CartDefender_Actions
 * @author      Heptium Ltd. 
 * @copyright   Copyright (c) 2016 Heptium Ltd.  (http://www.cartdefender.com/)
 * @license     Open Software License
 */
-->
<config>
  <modules>
    <CartDefender_Actions>
      <version>1.1.0</version>
    </CartDefender_Actions>
  </modules>

  <global>
    <blocks>
      <actions>
        <class>CartDefender_Actions_Block</class>
      </actions>
    </blocks>
    <helpers>
      <actions>
        <class>CartDefender_Actions_Helper</class>
      </actions>
    </helpers>
        
    <events>
      <controller_front_send_response_before>
        <observers>
          <cartdefender_controller_front_send_response_before>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>ensureCookieSetBeforeResponse</method>
          </cartdefender_controller_front_send_response_before>
        </observers>
      </controller_front_send_response_before>
      <catalog_controller_product_view>
        <observers>
          <cartdefender_catalog_controller_product_view>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_catalog_controller_product_view>
        </observers>
      </catalog_controller_product_view>
      <checkout_cart_save_after>
        <observers>
          <cartdefender_checkout_cart_save_after>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_checkout_cart_save_after>
        </observers>
      </checkout_cart_save_after>
      <checkout_controller_multishipping_shipping_post>
        <observers>
          <cartdefender_checkout_controller_multishipping_shipping_post>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_checkout_controller_multishipping_shipping_post>
        </observers>
      </checkout_controller_multishipping_shipping_post>
      <checkout_controller_onepage_save_shipping_method>
        <observers>
          <cartdefender_checkout_controller_onepage_save_shipping_method>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_checkout_controller_onepage_save_shipping_method>
        </observers>
      </checkout_controller_onepage_save_shipping_method>
      <checkout_multishipping_controller_success_action>
        <observers>
          <cartdefender_checkout_multishipping_controller_success_action>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_checkout_multishipping_controller_success_action>
        </observers>
      </checkout_multishipping_controller_success_action>
      <checkout_onepage_controller_success_action>
        <observers>
          <cartdefender_checkout_onepage_controller_success_action>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_checkout_onepage_controller_success_action>
        </observers>
      </checkout_onepage_controller_success_action>
      <customer_login>
        <observers>
          <cartdefender_customer_login>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>handleCustomerLogin</method>
          </cartdefender_customer_login>
        </observers>
      </customer_login>
      <customer_logout>
        <observers>
          <cartdefender_customer_logout>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>handleCustomerLogout</method>
          </cartdefender_customer_logout>
        </observers>
      </customer_logout>
      <googlecheckout_checkout_before>
        <observers>
          <cartdefender_googlecheckout_checkout_before>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_googlecheckout_checkout_before>
        </observers>
      </googlecheckout_checkout_before>
      <googlecheckout_save_order_after>
        <observers>
          <cartdefender_googlecheckout_save_order_after>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_googlecheckout_save_order_after>
        </observers>
      </googlecheckout_save_order_after>
      <order_cancel_after>
        <observers>
          <cartdefender_order_cancel_after>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_order_cancel_after>
        </observers>
      </order_cancel_after>
      <sales_order_payment_cancel>
        <observers>
          <cartdefender_sales_order_payment_cancel>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_sales_order_payment_cancel>
        </observers>
      </sales_order_payment_cancel>
      <sales_order_payment_capture>
        <observers>
          <cartdefender_sales_order_payment_capture>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_sales_order_payment_capture>
        </observers>
      </sales_order_payment_capture>
      <sales_order_payment_pay>
        <observers>
          <cartdefender_sales_order_payment_pay>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_sales_order_payment_pay>
        </observers>
      </sales_order_payment_pay>
      <sales_order_payment_place_end>
        <observers>
          <cartdefender_sales_order_payment_place_end>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_sales_order_payment_place_end>
        </observers>
      </sales_order_payment_place_end>
      <sales_order_payment_place_start>
        <observers>
          <cartdefender_sales_order_payment_place_start>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_sales_order_payment_place_start>
        </observers>
      </sales_order_payment_place_start>
      <sales_order_payment_refund>
        <observers>
          <cartdefender_sales_order_payment_refund>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_sales_order_payment_refund>
        </observers>
      </sales_order_payment_refund>
      <sales_order_payment_void>
        <observers>
          <cartdefender_sales_order_payment_void>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_sales_order_payment_void>
        </observers>
      </sales_order_payment_void>
      <wishlist_add_item>
        <observers>
          <cartdefender_wishlist_add_item>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_wishlist_add_item>
        </observers>
      </wishlist_add_item>
      <wishlist_add_product>
        <observers>
          <cartdefender_wishlist_add_product>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_wishlist_add_product>
        </observers>
      </wishlist_add_product>
      <wishlist_add_product>
        <observers>
          <cartdefender_wishlist_add_product>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_wishlist_add_product>
        </observers>
      </wishlist_add_product>
      <wishlist_product_add_after>
        <observers>
          <cartdefender_wishlist_product_add_after>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_wishlist_product_add_after>
        </observers>
      </wishlist_product_add_after>
      <wishlist_share>
        <observers>
          <cartdefender_wishlist_share>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_wishlist_share>
        </observers>
      </wishlist_share>
      <wishlist_update_item>
        <observers>
          <cartdefender_wishlist_update_item>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_wishlist_update_item>
        </observers>
      </wishlist_update_item>
      <controller_action_predispatch_checkout_onepage_index>
        <observers>
          <cartdefender_controller_action_predispatch_checkout_onepage_index>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_controller_action_predispatch_checkout_onepage_index>
        </observers>
      </controller_action_predispatch_checkout_onepage_index>
      <controller_action_predispatch_checkout_multishipping_index>
        <observers>
          <cartdefender_controller_action_predispatch_checkout_multishipping_index>
            <type>singleton</type>
            <class>CartDefender_Actions_Model_Observer</class>
            <method>captureEvent</method>
          </cartdefender_controller_action_predispatch_checkout_multishipping_index>
        </observers>
      </controller_action_predispatch_checkout_multishipping_index>
      
    </events>
  </global>

  <frontend>
    <layout>
      <updates>
        <actions>
          <file>actions.xml</file>
        </actions>
      </updates>
    </layout>
    <routers>
      <actions>
        <use>standard</use>
        <args>
          <module>CartDefender_Actions</module>
          <frontName>cartdefender</frontName>
        </args>
      </actions>
    </routers>   
  </frontend>

  <adminhtml>
    <acl>
      <resources>
        <admin>
          <children>
            <system>
              <children>
                <config>
                  <children>
                    <actions translate="title" module="actions">
                      <title>Actions</title>
                    </actions>
                  </children>
                </config>
              </children>
            </system>
          </children>
        </admin>
      </resources>
    </acl>
  </adminhtml>
</config>
