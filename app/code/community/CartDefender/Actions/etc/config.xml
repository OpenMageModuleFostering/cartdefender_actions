<?xml version="1.0"?>
<!--
/**
 * Cart Defender Actions plugin for Magento
 *
 * @package     CartDefender_Actions
 * @author      Heptium Ltd.
 * @copyright   Copyright (c) 2016 Heptium Ltd.  (http://www.cartdefender.com/)
 * @license     Open Software License
 */
-->
<config>
    <modules>
        <CartDefender_Actions>
            <version>2.1.8</version>
        </CartDefender_Actions>
    </modules>

    <global>
        <blocks>
            <actions>
                <class>CartDefender_Actions_Block</class>
            </actions>
        </blocks>
        <helpers>
            <actions>
                <class>CartDefender_Actions_Helper</class>
            </actions>
        </helpers>
        <models>
            <actions>
                <class>CartDefender_Actions_Model</class>
            </actions>
        </models>
    </global>

    <frontend>
        <events>
            <controller_front_send_response_before>
                <observers>
                    <cartdefender_controller_front_send_response_before>
                        <type>singleton</type>
                        <class>CartDefender_Actions_Model_Observer</class>
                        <method>handleControllerFrontSendResponseBefore</method>
                    </cartdefender_controller_front_send_response_before>
                </observers>
            </controller_front_send_response_before>
            <checkout_cart_save_after>
                <observers>
                    <cartdefender_checkout_cart_save_after>
                        <type>singleton</type>
                        <class>CartDefender_Actions_Model_Observer</class>
                        <method>captureEvent</method>
                    </cartdefender_checkout_cart_save_after>
                </observers>
            </checkout_cart_save_after>
            <checkout_multishipping_controller_success_action>
                <observers>
                    <cartdefender_checkout_multishipping_controller_success_action>
                        <type>singleton</type>
                        <class>CartDefender_Actions_Model_Observer</class>
                        <method>captureEvent</method>
                    </cartdefender_checkout_multishipping_controller_success_action>
                </observers>
            </checkout_multishipping_controller_success_action>
            <checkout_onepage_controller_success_action>
                <observers>
                    <cartdefender_checkout_onepage_controller_success_action>
                        <type>singleton</type>
                        <class>CartDefender_Actions_Model_Observer</class>
                        <method>captureEvent</method>
                    </cartdefender_checkout_onepage_controller_success_action>
                </observers>
            </checkout_onepage_controller_success_action>
            <customer_login>
                <observers>
                    <cartdefender_customer_login>
                        <type>singleton</type>
                        <class>CartDefender_Actions_Model_Observer</class>
                        <method>handleCustomerLogin</method>
                    </cartdefender_customer_login>
                </observers>
            </customer_login>
            <customer_logout>
                <observers>
                    <cartdefender_customer_logout>
                        <type>singleton</type>
                        <class>CartDefender_Actions_Model_Observer</class>
                        <method>handleCustomerLogout</method>
                    </cartdefender_customer_logout>
                </observers>
            </customer_logout>
            <googlecheckout_checkout_before>
                <observers>
                    <cartdefender_googlecheckout_checkout_before>
                        <type>singleton</type>
                        <class>CartDefender_Actions_Model_Observer</class>
                        <method>captureEvent</method>
                    </cartdefender_googlecheckout_checkout_before>
                </observers>
            </googlecheckout_checkout_before>
            <googlecheckout_save_order_after>
                <observers>
                    <cartdefender_googlecheckout_save_order_after>
                        <type>singleton</type>
                        <class>CartDefender_Actions_Model_Observer</class>
                        <method>captureEvent</method>
                    </cartdefender_googlecheckout_save_order_after>
                </observers>
            </googlecheckout_save_order_after>
            <order_cancel_after>
                <observers>
                    <cartdefender_order_cancel_after>
                        <type>singleton</type>
                        <class>CartDefender_Actions_Model_Observer</class>
                        <method>captureEvent</method>
                    </cartdefender_order_cancel_after>
                </observers>
            </order_cancel_after>
            <sales_order_place_after>
                <observers>
                    <cartdefender_sales_order_place_after>
                        <type>singleton</type>
                        <class>CartDefender_Actions_Model_Observer</class>
                        <method>captureEvent</method>
                    </cartdefender_sales_order_place_after>
                </observers>
            </sales_order_place_after>
            <controller_action_predispatch_checkout_onepage_index>
                <observers>
                    <cartdefender_controller_action_predispatch_checkout_onepage_index>
                        <type>singleton</type>
                        <class>CartDefender_Actions_Model_Observer</class>
                        <method>captureEvent</method>
                    </cartdefender_controller_action_predispatch_checkout_onepage_index>
                </observers>
            </controller_action_predispatch_checkout_onepage_index>
            <controller_action_predispatch_checkout_multishipping_index>
                <observers>
                    <cartdefender_controller_action_predispatch_checkout_multishipping_index>
                        <type>singleton</type>
                        <class>CartDefender_Actions_Model_Observer</class>
                        <method>captureEvent</method>
                    </cartdefender_controller_action_predispatch_checkout_multishipping_index>
                </observers>
            </controller_action_predispatch_checkout_multishipping_index>
        </events>
        <layout>
            <updates>
                <actions>
                    <file>actions.xml</file>
                </actions>
            </updates>
        </layout>
        <routers>
            <actions>
                <use>standard</use>
                <args>
                    <module>CartDefender_Actions</module>
                    <frontName>cartdefender</frontName>
                </args>
            </actions>
        </routers>
    </frontend>

    <adminhtml>
        <acl>
            <resources>
                <admin>
                    <children>
                        <system>
                            <children>
                                <config>
                                    <children>
                                        <actions translate="title" module="actions">
                                            <title>Actions</title>
                                        </actions>
                                    </children>
                                </config>
                            </children>
                        </system>
                    </children>
                </admin>
            </resources>
        </acl>
    </adminhtml>
</config>
